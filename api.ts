/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Simple Artist API
 * A simple API to understand the Swagger Specification in greater detail
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://virtserver.swaggerhub.com/getbamboo.io/SampleOAPI2/1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Artist
 */
export interface Artist {
    /**
     * 
     * @type {string}
     * @memberof Artist
     */
    artistName?: string;
    /**
     * 
     * @type {string}
     * @memberof Artist
     */
    artistGenre?: string;
    /**
     * 
     * @type {number}
     * @memberof Artist
     */
    albumsRecorded?: number;
    /**
     * 
     * @type {string}
     * @memberof Artist
     */
    username: string;
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    artistName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    artistGenre?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    albumsRecorded?: number;
}

/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message?: string;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of artists
         * @param {number} [limit] Limits the number of items on a page
         * @param {number} [offset] Specifies the page number of the artists to be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsGet(limit?: number, offset?: number, options: any = {}): FetchArgs {
            const localVarPath = `/artists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lets a user post a new artist
         * @param {Artist} [artist] creates a new artist in our database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsPost(artist?: Artist, options: any = {}): FetchArgs {
            const localVarPath = `/artists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = JSON.stringify(artist || {});

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain information about an artist from his or her unique username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsUsernameGet(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling artistsUsernameGet.');
            }
            const localVarPath = `/artists/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a list of artists
         * @param {number} [limit] Limits the number of items on a page
         * @param {number} [offset] Specifies the page number of the artists to be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsGet(limit?: number, offset?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Artist>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).artistsGet(limit, offset, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Lets a user post a new artist
         * @param {Artist} [artist] creates a new artist in our database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsPost(artist?: Artist, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).artistsPost(artist, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Obtain information about an artist from his or her unique username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsUsernameGet(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).artistsUsernameGet(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns a list of artists
         * @param {number} [limit] Limits the number of items on a page
         * @param {number} [offset] Specifies the page number of the artists to be displayed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsGet(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).artistsGet(limit, offset, options)(fetch, basePath);
        },
        /**
         * Lets a user post a new artist
         * @param {Artist} [artist] creates a new artist in our database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsPost(artist?: Artist, options?: any) {
            return DefaultApiFp(configuration).artistsPost(artist, options)(fetch, basePath);
        },
        /**
         * Obtain information about an artist from his or her unique username
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsUsernameGet(username: string, options?: any) {
            return DefaultApiFp(configuration).artistsUsernameGet(username, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns a list of artists
     * @param {} [limit] Limits the number of items on a page
     * @param {} [offset] Specifies the page number of the artists to be displayed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsGet(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).artistsGet(limit, offset, options)(this.fetch, this.basePath);
    }

    /**
     * Lets a user post a new artist
     * @param {} [artist] creates a new artist in our database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsPost(artist?: Artist, options?: any) {
        return DefaultApiFp(this.configuration).artistsPost(artist, options)(this.fetch, this.basePath);
    }

    /**
     * Obtain information about an artist from his or her unique username
     * @param {} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsUsernameGet(username: string, options?: any) {
        return DefaultApiFp(this.configuration).artistsUsernameGet(username, options)(this.fetch, this.basePath);
    }

}

